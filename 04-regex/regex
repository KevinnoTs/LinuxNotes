正则表达式 Regex

正则表达式就是为了处理大量字符串而定义的一套规则和方法

本篇为Linux正则表达式，仅用于Linux三剑客，Linux正则表达式一般是以行为单位处理的

为了测试方便，建议增加grep别名（alias grep='grep --color=auto'）并调整字符集为LC_ALL=C（export LC_ALL=C）

参考资料：https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215

注：

1、本文中以n和m代表任意非负整数，并且n<=m

2、本文中以..代表任意字符

3、本文中以exp代表任意表达式


一、Linux正则表达式定义：

Linux正则表达式（Regular Expression）主要遵从POSIX BRE（基本正则表达式：Basic Regular Expression）或者POSIX ERE（扩展正则表达式：Extended Regular Expression）标准。什么是POSIX呢，POSIX Portable Operating System Interface 可移植操作系统接口ERE是BRE的扩展版本，具体更强的处理能力，并增加了一些元字符（metacharactor）。

Linux三剑客（awk、sed、grep）支持的表达式标准
	awk		默认支持ERE
	sed		默认支持BRE
	sed -r 	可支持ERE
	grep	默认支持BRE
	grep -E 可支持ERE
	grep -P 可支持Perl
	egrep	默认支持ERE（该命令等同于grep -E）


二、正则表达式组成：

1、	一般字符：没有特殊意义的字符

2、	特殊字符（meta字符）：元字符，在正则表达式中有特殊意义


三、BRE、ERE都有的meta字符：

1、	"\" 	转义符，通常用于打开或关闭后续字符的特殊含义
			最常见的是将表达式中的元字符转义输出为该符号本身
			在\{n,m\}中，则把{}符号本身赋予特殊意义
				在BRE中，{}该符号本身并没有特殊意义，只是他本身
				在ERE中，{n,m}表示前面的字符出现了n到m次，{}本身有意义
			同理还有BRE中的\(\)和ERE中的()

2、	"."		匹配任意单个字符（不包括换行符）

3、	"*"		匹配前面的字符0个或多个
			在BRE中等价于"\{0,\}"，在ERE中等价于"{0,1}"
			.*\..*	表示匹配包含最少一个"."的字符串，点可以在开头、可以在结尾也可以在中间

4、 "^.."	匹配后面的正则表达式，BRE中表示以...开头，ERE中在任何位置都有特殊含义
			^http	表示匹配以http开头的整行内容

5、	"..$"	匹配前面的正则表达式，BRE中表示以...结尾，ERE中在任何位置都有特殊含义
			ing$	表示匹配以ing结尾的整行内容

6、	"[..]"	匹配放括号内的任意字符，其中可以用连字符"-"，表示连续字符的范围
			"[xyz]"	表示匹配x、y、z任意一个字符
			"[0-9]"	表示匹配0～9的任意数字

7、	"[^..]"	匹配不是括号内任意字符的任意字符，其中可以用连字符"-"，表示连续字符的范围
			"[^xyz]"	表示匹配非x、非y、非z的任意字符

8、	"\w"	匹配任意数字或字母或下划线
			等价于[A-Za-z0-9_]

9、	"\W"	匹配任意非数字或字母或下划线
			等价于[^A-Za-z0-9_]

10、	"\b"	匹配开头或结尾的位置
			如匹配开头，这个字符串前面必须是非字符串（\W）才可以匹配
			如匹配结尾，这个字符串后面必须是非字符串（\W）才可以匹配

11、	"\B"	匹配非单词边界的位置
			"er\B"	匹配verb中的er，但并不能匹配never中的er

12、	"\s"	匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]

13、	"\S"	匹配任何可见字符，等价于[^ \f\n\r\t\v]

14、	"\n"	后向引用
			调用一次第n个分组的表达式，分组使用"\(\)"（BRE）或"()"（ERE）
			\n的n在这个表达式中仅代表一个数字，\n这个表达式本身为换行符


四、BRE才有的字符

1、	"\{n,m\}"	区间表达式，匹配面前字符的重复次数
				"\{\n}"		表示匹配前面内容出现了n次
				"\{\n,m}"	表示匹配前面内容出现了n到m次
				"\{n,\}"	表示最少匹配n次
				"\{0,\}"	表示匹配0次或多次，相当于*
				"\{1,\}"	表示匹配1次或更多次，相当于ERE中的+
				"\{0,1\}"	表示匹配0次或1次，相当于ERE中的?
				^https\{0,1\}	表示匹配http或https为开头的整行内容

2、	"\(exp\)"	分组，也叫保留空间，可以将最多9个独立的子模式储存在单个分组中，分组用\n调用
				\(ab\).*\1	将ab这个匹配条件通过分组存储起来，通过\1重复调用该分组，该表达式表示在两个ab之间有任意数量个任意字符
				\(.\)\1		表示匹配两个连续的相同字符


五、ERE才有的字符

1、	"{n,m}"		同BRE中的"\{n,m\}"
				^https{0,1}	表示匹配http或https为开头的整行内容

2、	"(exp)"		同BRE中的"\(\)"，分组用\n调用

3、	"|"			条件或，即前面的字符或后面的字符
				http|https	表示匹配http或https
				[root@Ks-CentOS-6 regex]# egrep "3306|1521" /etc/services
				mysql           3306/tcp                        # MySQL
				mysql           3306/udp                        # MySQL
				ncube-lm        1521/tcp                # nCube License Manager
				ncube-lm        1521/udp                # nCube License Manager


六、等价，即等同的意思（大多数有限制，比如只能在ERE中使用或需要perl正则支持）

1、 	"\d"		表示匹配一个数字字符
				等价于[0-9]
				需perl正则支持，如grep需要加上-P，等价于[0-9]

2、 	"\D"		表示匹配一个非数字字符
				等价于[^0-9]
				需perl正则支持，如grep需要加上-P，等价于[^0-9]

3、	"+"			匹配前面的字符1个或多个
				ERE专用，等价于BRE中的"\{1,\}"，ERE中等价于"{1,}"
				^\w+@\w+\.\w+	表示以任意字母数字或下划线开头的任意1个或多个字母数字或下划线接@接任意一个或多个字母数字或下划线接.接任意一个或多个字母数字或下划线，可以用作邮箱的规范

4、	"?"			匹配前面的字符0个或1个
				ERE专用，等价于BRE中的"\{0,1\}"，ERE中等价于"{0,1}"
				^https?	表示匹配http或https为开头的整行内容

5、 "\<..\>"		匹配..单词的开始和结束，可以单独出现
				等价于前后都加\b，不是所有语言都可以使用


七、字符集 字符集需要再在外面加一层[]才可以被语言识别

[:alnum:] : 数字字母
[:digit:] : 数字
[:punct:] : 标点符号
[:alpha:] : 字母字符（包括大小写）
[:graph:] : 非空格字符
[:space:] : 包括换行符、回车等在内的所有空白符
[:blank:] : 空格与制表符（横向和纵向）
[:lower:] : 小写字母字符
[:upper:] : 大写字母字符
[:cntrl:] : 控制字符（ASCII字符集中的前32个）
[:print:] : 可显示（打印）的字符
[:xdigit:] : 16进制数字

	[[:alpha:]!]
		匹配任意英文字母或感叹号
	[^[:alnum:]]
		匹配任意非数字字母的字符

八、实用说明

1、在vi/vim里，^ 表示一行的开头

2、在vi/vim里，$ 表示一行的结尾

3、在vi/vim里，^$ 表示空行

4、.* 表示任意个数任意字符，即所有

5、.不能显示空行

6、\{n,m\} 在egrep和sed -r中可以去掉\，即{n,m}

7、\{,m\} 在CentOS 5中报错

8、字符集虽然简单，但没必要记忆


九、实例应用

1.	验证用户名和密码
	"^[a-zA-Z]\w{5,15}$" 只能由6～16位字母数字下划线组成，且第一位必须为字母

2.	验证电话号码
	"^[0-9]{1,3}-[0][0-9]{2,3}-[0-9]{7,11}$" 分为三部分，用-隔开，第一部分为国家号码，第二部分为区号，第三部分为号码

3.	验证手机号码
	"^1[3|4|5|7|8][0-9]{9}$" 第一位为1，第二位为3、4、5、7、8中的一个，后面接9位数字

4.	验证身份证号
	"[0-9]{17}[0-9xX]" 前17位为数字，最后一位为数字或大小写的x

5.	验证Email地址
	"^\w\{1,\}[-+.]*\w*@\w\{1,\}[-+.]*\w*\.\w\{1,\}[-.]*\w*$" 以数字字母下划线开头，后面可以有多个-、+、.或数字字母下划线

6.	只能输入由数字和26个英文字母组成的字符串
	"^[A-Za-z0-9]\{1,\}$"

7.	整数或者小数
	^[0-9]\{1,\}[.0-9][0-9]\{1,\}$

8.	只能输入数字
	"^[0-9]*$"

9.	只能输入n位的数字
	"^[0-9]]\{n\}$"

10.	只能输入至少n位的数字
	"^[0-9]\{n,\}$"。

11.	只能输入n~m位的数字
	"^[0-9]{n,m}$"

12.	只能输入零和非零开头的数字
	"^(0|[1-9][0-9]*)$" 因为有多个匹配项，所以只能用ERE实现，BRE中|只是他本身

13.	只能输入有两位小数的正实数
	"^[0-9]\{1,\}\(\.[0-9]\{2\}\)\{0,1\}$"

14.	只能输入有1~3位小数的正实数
	"^[0-9]\{1,\}\(\.[0-9]\{1,3\}\)\{0,1\}$"。

15.	只能输入非零的正整数
	"^[1-9][0-9]*$"

16.	只能输入非零的负整数
	"^\-[1-9][0-9]*$"

17.	只能输入长度为3的字符
	"^.\{3\}$"

18.	只能输入由26个英文字母组成的字符串
	"^[A-Za-z]\{1,\}$"

19.	只能输入由26个大写英文字母组成的字符串
	"^[A-Z]\{1,\}$"。

20.	只能输入由26个小写英文字母组成的字符串
	"^[a-z]\{1,\}$"。

21.	验证是否含有^%&',;=?$\"等字符
	"[%&',;=?$\\^]\{1,\}"

22.	只能输入汉字
	"^[\u4e00-\u9fa5]{0,}$"	涉及到\ucode，code为4位十六进制Unicode字符，只做了解

23.	验证URL：
	"^https\{0,1\}://.*\..*"

24.	验证一年的12个月
	"^(0?[1-9]|1[0-2])$" 表示"01"～"09"和"10"～"12"

25.	验证一个月的31天
	"^((0?[1-9])|((1|2)[0-9])|30|31)$" 表示"01"～"09"、"10"～"29"和"30"~"31"

26.	获取日期正则表达式：
	"\d{4}[年|\-|\.]\d{\1-\12}[月|\-|\.]\d{\1-\31}日?"

27.	匹配空白行的正则表达式
	\n\s*\r 可以用来删除空白行

28.	匹配首尾空白字符的正则表达式
	^\s*|\s*$ 可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式

29.	匹配网址URL的正则表达式
	[a-zA-z]+://[^\s]*

30.	匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)
	^[a-zA-Z][a-zA-Z0-9_]{4,15}$

31.	匹配ip地址
	([1-9]{1,3}\.){3}[1-9] 1位或3位数字加.，出现3次，再加一次1位或3位数字

32.	匹配MAC地址
	([A-Fa-f0-9]{2}\:){5}[A-Fa-f0-9] 每两位大小写字母a-f或数字位一组，每两组之间有一个":"

十、企业实战

1、从ifconfig里取ip
		[root@Ks-CentOS-6 ~]# ifconfig eth0
		eth0      Link encap:Ethernet  HWaddr 00:0C:29:A1:3E:C6
		          inet addr:192.168.31.156  Bcast:192.168.31.255  Mask:255.255.255.0
		          inet6 addr: fe80::20c:29ff:fea1:3ec6/64 Scope:Link
		          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
		          RX packets:94185 errors:0 dropped:0 overruns:0 frame:0
		          TX packets:6909 errors:0 dropped:0 overruns:0 carrier:0
		          collisions:0 txqueuelen:1000
		          RX bytes:6219949 (5.9 MiB)  TX bytes:428489 (418.4 KiB)
		#原命令输出
	方法一：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n '2p'
		          inet addr:192.168.31.156  Bcast:192.168.31.255  Mask:255.255.255.0
		#输出第二行
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n '2p' | sed 's#^.*dr:##g'
		192.168.31.156  Bcast:192.168.31.255  Mask:255.255.255.0
		#对ip地址前面的信息匹配并替换掉
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n '2p' | sed 's#^.*dr:##g' | sed 's#  B.*$##g'
		192.168.31.156
		#对ip地址后面的信息匹配并替换掉
	方法二：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n '2s#^.*dr:##gp'
		192.168.31.156  Bcast:192.168.31.255  Mask:255.255.255.0
		#在方法一的基础上少使用一个管道
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n '2s#^.*dr:##gp' | sed 's#  B.*$##g'
		192.168.31.156
		#这一步和方法一同理
	方法三（sed的最佳方法）：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | sed -n 's#^.*dr:\(.*\)  B.*$#\1#gp'
		192.168.31.156
		#通过前后匹配卡死中间内容，使用后向引用输出ip地址
	方法四（最佳方法）：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | awk -F "[ :]+" 'NR==2 {print $4}'
		192.168.31.156
	方法五：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | awk NR==2 | grep -Po '(?<=:)(\d+.){3}(\d+)(?=  B)'
		192.168.31.156
		#"-P"为grep支持Perl的参数，此为扩展内容，了解即可。-o为只显示匹配项
	方法六：
		[root@Ks-CentOS-6 ~]# ifconfig eth0 | grep -Po '(?<=dr:)\S+'
		192.168.31.156
		#直接断言即可，\S为可见字符，inet6 addr:后面有空格
	同理练习：
		[root@Ks-CentOS-6 ~]# stat /etc/hosts
		  File: `/etc/hosts'
		  Size: 158             Blocks: 8          IO Block: 4096   regular file
		Device: 803h/2051d      Inode: 39          Links: 2
		Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
		Access: 2018-07-30 01:02:16.251013744 +0800
		Modify: 2018-07-25 00:24:35.808342296 +0800
		Change: 2018-07-25 00:24:35.809342332 +0800
		#取出该文件的权限代表数字
		[root@Ks-CentOS-6 ~]# stat /etc/hosts | sed -n 's#^.*ss: (\(.*\)\/[-rwx].*$#\1#gp'
		0644
		#以"ss: ("匹配所取字段开头，以"/[-rwx]"匹配所取字段结尾，卡死中间内容，后向引用
2、删除文本中的空行
		[root@Ks-CentOS-6 test]# grep -v "^$" test.txt
		#"^$"为空行，-v排除空行
		[root@Ks-CentOS-6 test]# sed '/^$/d' test.txt
		#d为删除匹配行
		[root@Ks-CentOS-6 test]# awk '/^[^$]/' test.txt
		#[^$]为排除直接结尾，^[^$]为以不是结尾开头的，即非空行
