正则表达式 Regex

本篇为完整正则表达式，并非完全适用于Linux，只做拓展学习

参考资料：https://www.oschina.net/question/12_9507

一、 元字符

1、	^ 	表示以...开头

		"^d"	表示匹配以d字母开头的

2、	$ 	表示以...结尾

		"$/"	表示匹配以/符号结尾的

3、	\b 	表示匹配字符串（包括英文字母、数字、下划线，即\w）的开头或结尾
		如匹配开头，这个字符串前面必须是非字符串（\W）才可以匹配
		如匹配结尾，这个字符串后面必须是非字符串（\W）才可以匹配

		"\bhi\b"	表示匹配为hi，him不会被匹配

4、	\d 	表示匹配一位数字

5、	\s 	表示匹配任意空白符，包括但不仅限于空格、制表符（Tab）、换行符、中文全角空格等

6、	\w 	表示匹配字母或数字或下划线或汉字

		"\b\w{6}\b"	表示匹配正好6个字符的单词

7、 . 	表示任意单个不包括换行符的字符


二、字符转义

1、 \ 	转义符，后面跟的第一个字符在表达式中只代表符号本身，无其他意义，"\\n"为\n而非换行符

		"\n"	表示匹配n这个字母

		"\\"	表示匹配\这个字符

		"\*"	表示匹配*这个字符


三、重复

1、	*	表示匹配前面的字符0个或多个

		".*"	表示任意数量的不包含换行的字符

		"\w*"	表示匹配0个或多个字母或数字或下划线或汉字

		"\d*"	表示匹配0个或多个数字

2、	+	表示匹配前面的字符1个或多个

		\w+	表示匹配1个或多个字母或数字或下划线或汉字

		\d+	表示匹配1个或多个数字

3、	?	表示匹配前面的字符0个或1个
		放在其他字符后面表示匹配前面的字符可以有也可以没有
		放在*、+后面表示匹配尽可能少的字符

		字符串：fooooo
		fo* 匹配整个单词fooooo
		fo+ 匹配整个单词fooooo
		fo*? 匹配fo
		fo+? 匹配f

4、	{n}	表示匹配

		"1\d{10}"	表示匹配包含1开头的11位数字的字符串

5、	{n,} 表示匹配n个或多个

6、	{n,m} 表示匹配n到m个

		"^\d{5,12}$" 表示匹配5～12位数字，也就是QQ号


四、字符类

1、	[]	表示匹配范围，从方括号中任意一个字符都可以成为匹配项

		[aeiou]	表示匹配英文元音字母

		[.!?]	表示匹配标点符号.或!或?，[]内的符号只表示符号，不需要转义

		[0-9]	表示匹配任意一个数字，等于\d

		[a-z0-9A-Z_]	表示匹配任意字母或数字或下划线，在英文状态下，等于\w

		\b\(?0\d{2}[) -]?\d{8}\b	表示匹配座机电话
									其中\b 	表示开始，
									\( 		表示转义，表示匹配(
									? 		表示前面的(可有可无
									0\d{2} 	表示匹配数字0后面接2位数字用于匹配区号
									[) -]? 	表示匹配")"或"-"或"空格"其中任意一个也可以什么都没有
									\d{8} 	表示匹配8位数字
									\b 		表示结尾
									(010)88886666、022-22334455、02912345678都可以匹配到

五、分枝条件

1、 |	表示把不同分枝条件隔开，匹配任意分枝条件都算匹配
		需要注意的是，分枝条件需要注意顺序，系统会从做往右从前往后依次匹配，前面条件匹配后就不会管后面条件了
		所以分枝条件一定要越往前的条件越精细，越往后越宽泛，后面条件可以包含前面的条件

		0\d{2}-\d{8}|0\d{3}-\d{7}	表示匹配电话，分别为3位区号8位号码和4位区号7位号码，中间用-隔开

		\(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}	表示区号要么都带括号，要么不带括号
												同时区号和电话之间可以有-或空格连接，也可以没有
												修正了字符类例子中可能出现括号不成对出现也可以匹配的问题

		\d{5}-\d{4}|\d{5}	表示匹配美国邮政编码，匹配结果为5位数字通过-连接4位数字，或只有5位数字
							该例子不可以将分枝条件前后呼唤，因为修改顺序后（\d{5}|\d{5}-\d{4}）只会匹配5位的邮编及9位邮编的前5位


六、分组

1、	()	表示对小括号内的表达式进行操作，如将制定表达式重复多次

		(\d{1,3}\.){3}\d{1,3}	表示匹配ip地址（当然不考虑数字大于255的情况）
								\d{1,3} 		表示匹配最大三位数字
								\. 				表示转义"."这个符号
								(\d{1,3}.) 		表示将三位数字加一个.分组
								(\d{1,3}\.){3} 	表示将该分组重复3次

		2[0-4]\d|25[0-5]|[01]?\d\d?	表示匹配一个不大于255的数字，用于完善上面的例子
									2[0-4]\d	表示第一位为2，第二位为0或1或2或3或4，第三位任意数字
									25[0-5]		表示第一位为2，第二位为5，第三位0到5的数字
									[01]?\d\d?	表示第一位为0或1，第二位任意数字，第三位任意数字，其中第一位和第三位也可以没有
												当然也可以写成第一位和第二位可以没有
									表示ip地址的正则表达式应该是：
												((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
												这里需要注意，有分枝条件需要把所有分枝条件用小括号给括起来


七、反义

1、	\W 		表示匹配任意不是字母，数字，下划线，汉字的字符

2、 	\S 		表示匹配任意不是空白符的字符

			\S+	表示匹配不包含空白符的字符串

3、 	\D 		表示匹配任意非数字的字符

4、 	\B 		表示匹配不是字符串开头或结束的位置

5、 	[^x] 	表示匹配除x意外的任意字符，"[^]"内可以添加多个字母，类似"[]"

			<a[^>]+>	表示匹配用尖括号括起来的以a开头的字符串，不匹配"<a>"


八、后向引用 	当小括号制定一个字表达式（分组）后，匹配这个子表达式的文本，可以在表达式或后面的程序进一步处理
			默认情况下，每个分组会拥有一个组号，从左往右，以左括号位标志，第一个为1，第二个为2
			分组0对应整个表达式
			组号分配过程会从左向右扫描两遍，第一遍扫描未命名的，第二遍扫描已命名的
			有命名的组号必然大于所有未命名的组号
			可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权

1、 	(exp) 	表示匹配exp，并捕获文本到自动命名的组里，后面调用可以使用"\1"或"$1"调用

2、 (?<name>exp)	表示匹配exp，并捕获文本到名称为name的组里，也可以写成(?'name'exp)
				后面用\k<name>或\k'name'引用该分组文本

				(?<name>0{3})	表示匹配连续3个零，并将000储存进name的组里

3、	(?:exp)		表示匹配非捕获分组，即不捕获匹配的文本，也不给此组分配组号，因为没有存储内容，所以可以带来性能上的提升

4、	(?i)		表示匹配内容不区分大小写

				(?i)the	表示匹配THE, THe、ThE、The、tHE、tHe、thE、the
						其实一般情况下只需要匹配THE、The、the即可，可用(THE|The|the)代替

				(?i:the)	表示匹配一个不区分大小写的非捕获分组，匹配对象为the这三个字母
							(?i)(?:the)、(?:(?i)the) 意思一样，但建议使用最简洁写法


九、零宽断言	不用纠结这么复杂的名字，大概意思就是说用于查找某些内容（但并不包括这些内容）之前或之后的东西
			也就是说他们像\b、^、$那样用于制定一个位置，这个位置应该满足一定的条件（即断言）

1、	(?=exp)		表示匹配exp前面的位置（后面是exp的位置），也叫零宽度正预测先行断言，它断言自身出现的位置后面能匹配到exp

				\b\w+(?=ing\b)	表示匹配以ing结尾的单词的ing前面部分
								比如查找："I'm singing while you're dancing."匹配的是sing和danc

2、 	(?<=exp)	表示匹配exp后面的位置（前面是exp的位置），也叫零宽度正回顾后发断言，它断言自身出现的位置前面能匹配到exp

				(?<=\bre)\w+\b 	表示匹配以re开头的单词re后面的部分
								比如查找”I'm reading a book.“匹配的是ading

				((?<=\d)\d{3})+\b 	表示匹配每三位数字一组，组数大于等于1，但这串数字前面必须最少有一个数字
									可以理解为从右边数，每三位数字加一个逗号，类似金额的
									(?<=\d) 表示匹配任意数字后面，相当于标记一个位置，前面必须最少有一个数字
									((?<=\d)\d{3})	表示匹配三位数字，但这个数字前面必须最少有一个数字
									((?<=\d)\d{3})+	表示匹配多个三位数字的组合
									比如查找"1234567890"匹配的是"234567890"

				(?<=\s)\d+(?=\s)	表示匹配空白符和空白符中间的数字（不包括空白符）
									(?<=\s)	表示标记位置为空白符后面
									(?=\s)	表示标记位置为空白符前面
									比如查找"123 456 789"匹配的是"456"


十、负向零宽断言	如果只想要确保某个字符没有出现，但并不想去匹配它时，则需要使用负向零宽断言

1、 	(?!exp)		表示匹配后面不是exp的位置

2、	(?<!exp)	表示匹配前面不是exp的位置


...To be continued...