
OSI网络模型
	每层都有自己的功能集
	层与层之间相互独立又相互依靠
	上层依赖于下层，下层为上层提供服务
应用层：		应用程序及接口（类似于公司的老板）
			提供应用程序的接口：FTP、telnet、http、pop3等
			常见应用层：http(80)、ftp(20/21)、smtp(25)、pop3(110)、telnet(23)、dns(53)
表示层：		对数据进行转换、加密和压缩
			将上层的数据进行转换和编辑压缩为标准文件，如jpg、gif、asscii码等
会话层：		建立、管理和终止回话
传输层：		提供可靠的端到端的报文传输和差错控制（负责建立连接）
			TCP、UDP 建立可靠和非可靠的连接，将上层的数据进行分段处理
网络层：		将分组从源端传送到目的端，提供网络互联
			提供路由寻址（IP协议）将上层分段的数据进行打包
数据链路层：	将分组数据封装成帧（帧为局域网中传输数据的一个单元），提供节点到节点方式的传输（局域网内部点对点的寻址）
物理层：		在媒体上传输比特，提供机械的和电气的规约（底层链路介质的规范）


DoD参考模型
	用于简化OSI层次，以及相关标准
	对应的是TCP/IP协议簇
应用层： 		对应OSI的应用层，表示层，会话层
			对应协议：Telnet、FTP、TFTP、SNMP、HTTP、SMTP、NFS、DHCP
主机层：		对应传输层
			对应协议：TCP、UDP
因特网层：	对应网络层
			对应协议：ICMP、ARP、RARP、IP
网络接入层：	对应数据链路层，物理层
			对应协议：Ethernet、Fast Eth、TokenRing、FDDI


TCP三次握手
	1.
		客户端处于CLOSED状态-->主动建立TCB
		服务端处于CLOSED状态-->被动建立TCB-->进入LISTEN状态
		由客户端（发起方默认为客户端）发送建立TCP连接的请求报文，包含：
			SEQ=c（序列号）客户端随机产生
			SYN=1
		客户端进入SYN-SENT状态
	2.
		服务端回复客户端发送的TCP连接请求报文，包含：
			SEQ=s（序列号）服务端随机产生
			SYN=1
			ACK=c+1
		服务端进入SYN-RCVD状态
	3.
		客户端回复服务端发送的报文，包含：
			SEQ=c+1
			ACK=s+1
		客户端进入ESTABLISHED状态
		服务端收到客户端信息也进入ESTABLISHED状态
		双方可以开始通信


其中
	ACK TCP包头字段，表示验证
	SYN TCP包头字段，表示建立TCP连接
	FIN TCP包头字段，表示断开TCP连接

TCP四次挥手
	1.
		客户端处于ESTABLISHED状态
		由客户端发起断开TCP请求报文，包含：
			SEQ=c（序列号）客户端随机产生
			FIN=1
		客户端进入FIN-WAIT-1状态
	2.
		服务端回复收到TCP断开请求报文，包含：
			SEQ=s1（序列号）服务端随机产生
			FIN=1
			ACK=c+1
		服务端进入CLOSE-WAIT状态
		客户端收到该请求进入FIN-WAIT-2状态
	3.
		当服务端确保所有传给客户端的数据已经传输完毕，向客户端发送申请断开TCP请求报文，包含：
			SEQ=s2（序列号）服务端随机产生
			FIN=1
			ACK=c+1
		服务端进入LAST-ACK状态
	4.
		当客户端收到服务端的TCP断开请求后，回复报文，包含：
			SEQ=c+1（序列号）客户端随机产生
			ACK=s2+1
		客户端进入TIME-WAIT状态-->等待2MSL（最长报文段寿命）后-->进入COLSED
		服务端接收到该报文后，进入CLOSED状态

IP地址

IP地址为4组8位二进制数字组成，中间用.分隔
为了方便人类记忆，一边记作点分十进制
所以IP地址理论上每位最大数字为255

IP地址类型：
A类型	0NNNNNNN	Host			Host			Host			1.0.0.0 - 126.255.255.254
B类型	10NNNNNN	Network			Host			Host			128.0.0.1 - 192.255.255.254
C类型	110NNNNN	Network 		Network			Host			192.0.0.1 - 223.255.255.254
D类型	1110NNNN	Multicast group	Multicast group	Multicast group	224.0.0.1 - 239.255.255.254
E类型	Research
ABC三类分配给互联网用户使用
D类作为组播使用
E类作为科学研究使用，进行保留

特殊地址：
127.0.0.1		表示回环地址，测试使用
0.0.0.0			主机位全为0的，为网络地址。A类最后3位是0，B类最后2位是0，C类最后1位是0
255.255.255.255	主机位全为1的，为广播地址，向所有人发出信息。A类最后3位是1，B类最后2位是1，C类最后1位是1

私网IP地址：
10.0.0.0/8		（10.0.0.0		到	10.255.255.255）		A类地址
172.16.0.0./12	（172.16.0.0		到	172.31.255.255）		B类地址
192.168.0.0/16	（192.168.0.0	到	192.168.255.255）	C类地址
169.254.0.0/16	（169.254.0.0	到	169.254.255.255）	B类地址（微软默认使用）

掩码：
即IP地址后面的/数字
掩码表示该组位置有多少地址可以分配个主机位
掩码表示该组掩码数为多少个1（当掩码为8位二进制格式时）
而当前组能分配给多少主机使用，看该组的IP地址（二进制）与该组掩码（二进制）取"与"，即有1有0为1，都是1为1，都是0为0
默认情况下A类地址掩码为/8，B类为/16，C类为/24
即默认情况下，A类地址掩码默认为8个1，即255.0.0.0，后面3位因为都是0，取"与"则只看IP地址后3位，所以后3位为主机位
B类地址掩码为16个1，即255.255.0.0，后面两位0，取"与"只看IP地址后2位，所以后2位为主机位
C类地址掩码为24个1，即255.255.255.0，最后1位为主机位
注意私网IP地址规定了掩码，所以主机位不是严格按照默认ABC类来划分的
比如虽然192.168.0.0-192.168.255.255为C类地址，但是后2位都为主机位，都可以用户来在私网中自定义


DNS解析流程
DNS本身为树状结构，顶点为根，是"."。全球有13台根服务器
	第二层为顶级域名，如com、net等（完整域名最后其实是有一个"."的，只是通常情况下隐藏了）
	第三层为一级域名，如baidu.com
	第四层为主机名，如www.baidu.com、fanyi.baidu.com
1.先检查自己的hosts文件及本地DNS缓存
2.联系本地DNS服务器
3.本地DNS服务器联系根域服务器，告诉你顶级域名服务器地址（如www.baidu.com，根域服务器告诉你可以去找.com的服务器）
4.本地DNS服务器联系顶级域服务器，告诉你baidu.com域DNS服务器地址
5.本地DNS服务器联系域名服务器，告诉你具体主机解析的地址，即告诉你www.baidu.com的地址
6.本地DNS服务器缓存该域名的地址，下次主机访问，本地DNS服务器直接提供地址给主机


DNS解析相关命令
1.	dig 解析域名记录（DNS lookup utility）
	Usage: dig [@server] [name] [type]
	[root@Ks-CentOS-6 ~]# dig @8.8.8.8 hilx.me +trace

	; <<>> DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 <<>> @8.8.8.8 hilx.me +trace
	; (1 server found)
	;; global options: +cmd
	.                       201262  IN      NS      a.root-servers.net.
	.                       201262  IN      NS      b.root-servers.net.
	.                       201262  IN      NS      c.root-servers.net.
	.                       201262  IN      NS      d.root-servers.net.
	.                       201262  IN      NS      e.root-servers.net.
	.                       201262  IN      NS      f.root-servers.net.
	.                       201262  IN      NS      g.root-servers.net.
	.                       201262  IN      NS      h.root-servers.net.
	.                       201262  IN      NS      i.root-servers.net.
	.                       201262  IN      NS      j.root-servers.net.
	.                       201262  IN      NS      k.root-servers.net.
	.                       201262  IN      NS      l.root-servers.net.
	.                       201262  IN      NS      m.root-servers.net.
	;; Received 228 bytes from 8.8.8.8#53(8.8.8.8) in 1026 ms

	me.                     172800  IN      NS      a0.nic.me.
	me.                     172800  IN      NS      a2.nic.me.
	me.                     172800  IN      NS      b0.nic.me.
	me.                     172800  IN      NS      b2.nic.me.
	me.                     172800  IN      NS      c0.nic.me.
	;; Received 334 bytes from 198.41.0.4#53(198.41.0.4) in 248 ms

	hilx.me.                86400   IN      NS      ns53.domaincontrol.com.
	hilx.me.                86400   IN      NS      ns54.domaincontrol.com.
	;; Received 80 bytes from 199.249.119.1#53(199.249.119.1) in 219 ms

	hilx.me.                600     IN      A       45.78.11.101
	hilx.me.                3600    IN      NS      ns53.domaincontrol.com.
	hilx.me.                3600    IN      NS      ns54.domaincontrol.com.
	;; Received 96 bytes from 173.201.74.27#53(173.201.74.27) in 256 ms
	#解析hilx.me域名的整个过程

2.	nslookup 解析域名地址
	[root@Ks-CentOS-6 ~]# nslookup
	> hilx.me
	Server:         202.106.0.20
	Address:        202.106.0.20#53

	Non-authoritative answer:
	Name:   hilx.me
	Address: 45.78.11.101
	#解析域名地址

3.	host
	[root@Ks-CentOS-6 ~]# host hilx.me
	hilx.me has address 45.78.11.101

4.	ping
	[root@Ks-CentOS-6 ~]# ping hilx.me
	PING hilx.me (45.78.11.101) 56(84) bytes of data.
	64 bytes from 45.78.11.101.16clouds.com (45.78.11.101): icmp_seq=1 ttl=128 time=253 ms
	64 bytes from 45.78.11.101.16clouds.com (45.78.11.101): icmp_seq=2 ttl=128 time=154 ms
	64 bytes from 45.78.11.101.16clouds.com (45.78.11.101): icmp_seq=3 ttl=128 time=157 ms
	64 bytes from 45.78.11.101.16clouds.com (45.78.11.101): icmp_seq=4 ttl=128 time=154 ms
	^C
	--- hilx.me ping statistics ---
	4 packets transmitted, 4 received, 0% packet loss, time 4026ms
	rtt min/avg/max/mdev = 154.251/179.898/253.244/42.364 ms


配置DNS
修改文件：
/etc/sysconfig/network-scripts/ifcfg-eth0
/etc/resolv.conf
ifcfg-eth0网卡配置文件优先级高于resolv.conf
重启网络后，网卡配置文件内的DNS相关配置会覆盖resolv.conf文件内容


配置网关
命令行：
route add default gw 192.168.1.1
#添加默认网关
route -n
#查看路由表（网关）
netstat -rn
#查看网关


给网卡增加临时IP地址，也称为别名IP或虚拟IP
Linux下一块网卡可以指定多个IP地址
临时IP地址重启网卡后失效
可以写入配置文件，如/etc/sysconfig/network-scripts/ifcfg-eth1:0
ifconfig eth1:0 192.168.31.13/24 up
#临时增加一个IP地址，子网掩码为255.255.255.0，并启用
ifconfig eth1:0 down
#关闭临时IP地址
ip addr add 192.168.31.13/24 dev eth1:8
#ip addr添加临时IP地址（辅助IP地址）


查看端口占用：
lsof -i [tcp/udp]:22
#查看22端口占用情况
netstat -lntup | grep 22
#查看端口22，p显示进程名，u是udp协议，t是tcp协议，n是以数字显示，l是列表显示


网络排查：
1.	ping 自己服务器网站
	ping www.baidu.com
	如果不通，有可能因为icmp协议被禁用了

2.	traceroute www.baidu.com -n
	windows下使用cmd
		tracert -d www.baidu.com

3.	telnet hilx.me 80

4.	[root@Ks-CentOS-6 ~]# nmap 45.78.11.101 -p 80

	Starting Nmap 5.51 ( http://nmap.org ) at 2018-08-17 08:45 CST
	Nmap scan report for 45.78.11.101.16clouds.com (45.78.11.101)
	Host is up (0.039s latency).
	PORT   STATE SERVICE
	80/tcp open  http

	Nmap done: 1 IP address (1 host up) scanned in 0.95 seconds


抓包工具：
tcpdump
	[root@Ks-CentOS-6 ~]# tcpdump -n icmp -i eth0
	tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
	listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
	08:49:09.976220 IP 192.168.31.180 > 61.135.169.121: ICMP echo request, id 50491, seq 1, length 64
	......
	#-n选择协议，-i选择网卡

测试80端口
	curl hilx.me
	#显示首页源代码
	wget hilx.me
	#下载主页到当前目录下



